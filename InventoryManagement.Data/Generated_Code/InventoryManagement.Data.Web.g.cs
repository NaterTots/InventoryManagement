//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagement.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Commodity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class Commodity : Entity
    {
        
        private bool _discontinued;
        
        private int _inventoryID;
        
        private int _inventoryType;
        
        private string _partDescription;
        
        private string _partNumber;
        
        private int _reorderLevel;
        
        private int _unitOfMeasureID;
        
        private int _vendor;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiscontinuedChanging(bool value);
        partial void OnDiscontinuedChanged();
        partial void OnInventoryIDChanging(int value);
        partial void OnInventoryIDChanged();
        partial void OnInventoryTypeChanging(int value);
        partial void OnInventoryTypeChanged();
        partial void OnPartDescriptionChanging(string value);
        partial void OnPartDescriptionChanged();
        partial void OnPartNumberChanging(string value);
        partial void OnPartNumberChanged();
        partial void OnReorderLevelChanging(int value);
        partial void OnReorderLevelChanged();
        partial void OnUnitOfMeasureIDChanging(int value);
        partial void OnUnitOfMeasureIDChanged();
        partial void OnVendorChanging(int value);
        partial void OnVendorChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Commodity"/> class.
        /// </summary>
        public Commodity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Discontinued' value.
        /// </summary>
        [DataMember()]
        public bool Discontinued
        {
            get
            {
                return this._discontinued;
            }
            set
            {
                if ((this._discontinued != value))
                {
                    this.OnDiscontinuedChanging(value);
                    this.RaiseDataMemberChanging("Discontinued");
                    this.ValidateProperty("Discontinued", value);
                    this._discontinued = value;
                    this.RaiseDataMemberChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int InventoryID
        {
            get
            {
                return this._inventoryID;
            }
            set
            {
                if ((this._inventoryID != value))
                {
                    this.OnInventoryIDChanging(value);
                    this.ValidateProperty("InventoryID", value);
                    this._inventoryID = value;
                    this.RaisePropertyChanged("InventoryID");
                    this.OnInventoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryType' value.
        /// </summary>
        [DataMember()]
        public int InventoryType
        {
            get
            {
                return this._inventoryType;
            }
            set
            {
                if ((this._inventoryType != value))
                {
                    this.OnInventoryTypeChanging(value);
                    this.RaiseDataMemberChanging("InventoryType");
                    this.ValidateProperty("InventoryType", value);
                    this._inventoryType = value;
                    this.RaiseDataMemberChanged("InventoryType");
                    this.OnInventoryTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartDescription' value.
        /// </summary>
        [DataMember()]
        public string PartDescription
        {
            get
            {
                return this._partDescription;
            }
            set
            {
                if ((this._partDescription != value))
                {
                    this.OnPartDescriptionChanging(value);
                    this.RaiseDataMemberChanging("PartDescription");
                    this.ValidateProperty("PartDescription", value);
                    this._partDescription = value;
                    this.RaiseDataMemberChanged("PartDescription");
                    this.OnPartDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartNumber' value.
        /// </summary>
        [DataMember()]
        public string PartNumber
        {
            get
            {
                return this._partNumber;
            }
            set
            {
                if ((this._partNumber != value))
                {
                    this.OnPartNumberChanging(value);
                    this.RaiseDataMemberChanging("PartNumber");
                    this.ValidateProperty("PartNumber", value);
                    this._partNumber = value;
                    this.RaiseDataMemberChanged("PartNumber");
                    this.OnPartNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReorderLevel' value.
        /// </summary>
        [DataMember()]
        public int ReorderLevel
        {
            get
            {
                return this._reorderLevel;
            }
            set
            {
                if ((this._reorderLevel != value))
                {
                    this.OnReorderLevelChanging(value);
                    this.RaiseDataMemberChanging("ReorderLevel");
                    this.ValidateProperty("ReorderLevel", value);
                    this._reorderLevel = value;
                    this.RaiseDataMemberChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasureID' value.
        /// </summary>
        [DataMember()]
        public int UnitOfMeasureID
        {
            get
            {
                return this._unitOfMeasureID;
            }
            set
            {
                if ((this._unitOfMeasureID != value))
                {
                    this.OnUnitOfMeasureIDChanging(value);
                    this.RaiseDataMemberChanging("UnitOfMeasureID");
                    this.ValidateProperty("UnitOfMeasureID", value);
                    this._unitOfMeasureID = value;
                    this.RaiseDataMemberChanged("UnitOfMeasureID");
                    this.OnUnitOfMeasureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Vendor' value.
        /// </summary>
        [DataMember()]
        public int Vendor
        {
            get
            {
                return this._vendor;
            }
            set
            {
                if ((this._vendor != value))
                {
                    this.OnVendorChanging(value);
                    this.RaiseDataMemberChanging("Vendor");
                    this.ValidateProperty("Vendor", value);
                    this._vendor = value;
                    this.RaiseDataMemberChanged("Vendor");
                    this.OnVendorChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._inventoryID;
        }
    }
    
    /// <summary>
    /// The 'CommodityType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class CommodityType : Entity
    {
        
        private string _description;
        
        private string _typeCode;
        
        private int _typeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTypeCodeChanging(string value);
        partial void OnTypeCodeChanged();
        partial void OnTypeIDChanging(int value);
        partial void OnTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CommodityType"/> class.
        /// </summary>
        public CommodityType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeCode' value.
        /// </summary>
        [DataMember()]
        public string TypeCode
        {
            get
            {
                return this._typeCode;
            }
            set
            {
                if ((this._typeCode != value))
                {
                    this.OnTypeCodeChanging(value);
                    this.RaiseDataMemberChanging("TypeCode");
                    this.ValidateProperty("TypeCode", value);
                    this._typeCode = value;
                    this.RaiseDataMemberChanged("TypeCode");
                    this.OnTypeCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TypeID
        {
            get
            {
                return this._typeID;
            }
            set
            {
                if ((this._typeID != value))
                {
                    this.OnTypeIDChanging(value);
                    this.ValidateProperty("TypeID", value);
                    this._typeID = value;
                    this.RaisePropertyChanged("TypeID");
                    this.OnTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._typeID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'InventoryManagementService' DomainService.
    /// </summary>
    public sealed partial class InventoryManagementContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryManagementContext"/> class.
        /// </summary>
        public InventoryManagementContext() : 
                this(new WebDomainClient<IInventoryManagementServiceContract>(new Uri("InventoryManagement-Data-Web-InventoryManagementService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryManagementContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The InventoryManagementService service URI.</param>
        public InventoryManagementContext(Uri serviceUri) : 
                this(new WebDomainClient<IInventoryManagementServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryManagementContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public InventoryManagementContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="WorkOrder"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<WorkOrder> WorkOrders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WorkOrder>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Commodity"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<Commodity> Commodities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Commodity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CommodityType"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<CommodityType> CommodityTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CommodityType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MeansOfPayment"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<MeansOfPayment> MeansOfPayments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MeansOfPayment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UnitOfMeasure"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<UnitOfMeasure> UnitOfMeasures
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UnitOfMeasure>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Vendor"/> entity instances that have been loaded into this <see cref="InventoryManagementContext"/> instance.
        /// </summary>
        public EntitySet<Vendor> Vendors
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Vendor>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkOrder"/> entity instances using the 'GetAllWorkOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkOrder"/> entity instances.</returns>
        public EntityQuery<WorkOrder> GetAllWorkOrdersQuery()
        {
            this.ValidateMethod("GetAllWorkOrdersQuery", null);
            return base.CreateQuery<WorkOrder>("GetAllWorkOrders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Commodity"/> entity instances using the 'GetCommodities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Commodity"/> entity instances.</returns>
        public EntityQuery<Commodity> GetCommoditiesQuery()
        {
            this.ValidateMethod("GetCommoditiesQuery", null);
            return base.CreateQuery<Commodity>("GetCommodities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CommodityType"/> entity instances using the 'GetCommodityTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CommodityType"/> entity instances.</returns>
        public EntityQuery<CommodityType> GetCommodityTypesQuery()
        {
            this.ValidateMethod("GetCommodityTypesQuery", null);
            return base.CreateQuery<CommodityType>("GetCommodityTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MeansOfPayment"/> entity instances using the 'GetMeansOfPayments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MeansOfPayment"/> entity instances.</returns>
        public EntityQuery<MeansOfPayment> GetMeansOfPaymentsQuery()
        {
            this.ValidateMethod("GetMeansOfPaymentsQuery", null);
            return base.CreateQuery<MeansOfPayment>("GetMeansOfPayments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkOrder"/> entity instances using the 'GetOpenWorkOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkOrder"/> entity instances.</returns>
        public EntityQuery<WorkOrder> GetOpenWorkOrdersQuery()
        {
            this.ValidateMethod("GetOpenWorkOrdersQuery", null);
            return base.CreateQuery<WorkOrder>("GetOpenWorkOrders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UnitOfMeasure"/> entity instances using the 'GetUnitOfMeasures' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UnitOfMeasure"/> entity instances.</returns>
        public EntityQuery<UnitOfMeasure> GetUnitOfMeasuresQuery()
        {
            this.ValidateMethod("GetUnitOfMeasuresQuery", null);
            return base.CreateQuery<UnitOfMeasure>("GetUnitOfMeasures", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetUserQuery", parameters);
            return base.CreateQuery<User>("GetUser", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Vendor"/> entity instances using the 'GetVendors' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Vendor"/> entity instances.</returns>
        public EntityQuery<Vendor> GetVendorsQuery()
        {
            this.ValidateMethod("GetVendorsQuery", null);
            return base.CreateQuery<Vendor>("GetVendors", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new InventoryManagementContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'InventoryManagementService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IInventoryManagementServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllWorkOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetAllWorkOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetAllWorkOrders", ReplyAction="http://tempuri.org/InventoryManagementService/GetAllWorkOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllWorkOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllWorkOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllWorkOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllWorkOrders' operation.</returns>
            QueryResult<WorkOrder> EndGetAllWorkOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCommodities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetCommoditiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetCommodities", ReplyAction="http://tempuri.org/InventoryManagementService/GetCommoditiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCommodities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCommodities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCommodities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCommodities' operation.</returns>
            QueryResult<Commodity> EndGetCommodities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCommodityTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetCommodityTypesDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetCommodityTypes", ReplyAction="http://tempuri.org/InventoryManagementService/GetCommodityTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCommodityTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCommodityTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCommodityTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCommodityTypes' operation.</returns>
            QueryResult<CommodityType> EndGetCommodityTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMeansOfPayments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetMeansOfPaymentsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetMeansOfPayments", ReplyAction="http://tempuri.org/InventoryManagementService/GetMeansOfPaymentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMeansOfPayments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMeansOfPayments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMeansOfPayments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMeansOfPayments' operation.</returns>
            QueryResult<MeansOfPayment> EndGetMeansOfPayments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenWorkOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetOpenWorkOrdersDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetOpenWorkOrders", ReplyAction="http://tempuri.org/InventoryManagementService/GetOpenWorkOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenWorkOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenWorkOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenWorkOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenWorkOrders' operation.</returns>
            QueryResult<WorkOrder> EndGetOpenWorkOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnitOfMeasures' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetUnitOfMeasuresDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetUnitOfMeasures", ReplyAction="http://tempuri.org/InventoryManagementService/GetUnitOfMeasuresResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnitOfMeasures(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnitOfMeasures'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnitOfMeasures'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnitOfMeasures' operation.</returns>
            QueryResult<UnitOfMeasure> EndGetUnitOfMeasures(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetUser", ReplyAction="http://tempuri.org/InventoryManagementService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVendors' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/GetVendorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/GetVendors", ReplyAction="http://tempuri.org/InventoryManagementService/GetVendorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetVendors(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVendors'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVendors'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVendors' operation.</returns>
            QueryResult<Vendor> EndGetVendors(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InventoryManagementService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InventoryManagementService/SubmitChanges", ReplyAction="http://tempuri.org/InventoryManagementService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class InventoryManagementContextEntityContainer : EntityContainer
        {
            
            public InventoryManagementContextEntityContainer()
            {
                this.CreateEntitySet<Commodity>(EntitySetOperations.All);
                this.CreateEntitySet<CommodityType>(EntitySetOperations.All);
                this.CreateEntitySet<MeansOfPayment>(EntitySetOperations.All);
                this.CreateEntitySet<UnitOfMeasure>(EntitySetOperations.All);
                this.CreateEntitySet<User>(EntitySetOperations.Add);
                this.CreateEntitySet<Vendor>(EntitySetOperations.All);
                this.CreateEntitySet<WorkOrder>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'MeansOfPayment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class MeansOfPayment : Entity
    {
        
        private int _paymentMethodID;
        
        private string _paymentType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnPaymentMethodIDChanging(int value);
        partial void OnPaymentMethodIDChanged();
        partial void OnPaymentTypeChanging(string value);
        partial void OnPaymentTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MeansOfPayment"/> class.
        /// </summary>
        public MeansOfPayment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentMethodID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PaymentMethodID
        {
            get
            {
                return this._paymentMethodID;
            }
            set
            {
                if ((this._paymentMethodID != value))
                {
                    this.OnPaymentMethodIDChanging(value);
                    this.ValidateProperty("PaymentMethodID", value);
                    this._paymentMethodID = value;
                    this.RaisePropertyChanged("PaymentMethodID");
                    this.OnPaymentMethodIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentType' value.
        /// </summary>
        [DataMember()]
        public string PaymentType
        {
            get
            {
                return this._paymentType;
            }
            set
            {
                if ((this._paymentType != value))
                {
                    this.OnPaymentTypeChanging(value);
                    this.RaiseDataMemberChanging("PaymentType");
                    this.ValidateProperty("PaymentType", value);
                    this._paymentType = value;
                    this.RaiseDataMemberChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._paymentMethodID;
        }
    }
    
    /// <summary>
    /// The 'UnitOfMeasure' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class UnitOfMeasure : Entity
    {
        
        private string _description;
        
        private int _unitOfMeasureID;
        
        private string _unitOfMeasureTag;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUnitOfMeasureIDChanging(int value);
        partial void OnUnitOfMeasureIDChanged();
        partial void OnUnitOfMeasureTagChanging(string value);
        partial void OnUnitOfMeasureTagChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitOfMeasure"/> class.
        /// </summary>
        public UnitOfMeasure()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasureID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UnitOfMeasureID
        {
            get
            {
                return this._unitOfMeasureID;
            }
            set
            {
                if ((this._unitOfMeasureID != value))
                {
                    this.OnUnitOfMeasureIDChanging(value);
                    this.ValidateProperty("UnitOfMeasureID", value);
                    this._unitOfMeasureID = value;
                    this.RaisePropertyChanged("UnitOfMeasureID");
                    this.OnUnitOfMeasureIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasureTag' value.
        /// </summary>
        [DataMember()]
        public string UnitOfMeasureTag
        {
            get
            {
                return this._unitOfMeasureTag;
            }
            set
            {
                if ((this._unitOfMeasureTag != value))
                {
                    this.OnUnitOfMeasureTagChanging(value);
                    this.RaiseDataMemberChanging("UnitOfMeasureTag");
                    this.ValidateProperty("UnitOfMeasureTag", value);
                    this._unitOfMeasureTag = value;
                    this.RaiseDataMemberChanged("UnitOfMeasureTag");
                    this.OnUnitOfMeasureTagChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._unitOfMeasureID;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class User : Entity
    {
        
        private string _displayName;
        
        private string _email;
        
        private string _firstName;
        
        private string _lastName;
        
        private string _passwordAnswerHash;
        
        private string _passwordAnswerSalt;
        
        private string _passwordHash;
        
        private string _passwordQuestion;
        
        private string _passwordSalt;
        
        private bool _profileReset;
        
        private int _userID;
        
        private string _userName;
        
        private int _userType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnPasswordAnswerHashChanging(string value);
        partial void OnPasswordAnswerHashChanged();
        partial void OnPasswordAnswerSaltChanging(string value);
        partial void OnPasswordAnswerSaltChanged();
        partial void OnPasswordHashChanging(string value);
        partial void OnPasswordHashChanged();
        partial void OnPasswordQuestionChanging(string value);
        partial void OnPasswordQuestionChanged();
        partial void OnPasswordSaltChanging(string value);
        partial void OnPasswordSaltChanged();
        partial void OnProfileResetChanging(bool value);
        partial void OnProfileResetChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserTypeChanging(int value);
        partial void OnUserTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaisePropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordAnswerHash' value.
        /// </summary>
        [DataMember()]
        public string PasswordAnswerHash
        {
            get
            {
                return this._passwordAnswerHash;
            }
            set
            {
                if ((this._passwordAnswerHash != value))
                {
                    this.OnPasswordAnswerHashChanging(value);
                    this.RaiseDataMemberChanging("PasswordAnswerHash");
                    this.ValidateProperty("PasswordAnswerHash", value);
                    this._passwordAnswerHash = value;
                    this.RaiseDataMemberChanged("PasswordAnswerHash");
                    this.OnPasswordAnswerHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordAnswerSalt' value.
        /// </summary>
        [DataMember()]
        public string PasswordAnswerSalt
        {
            get
            {
                return this._passwordAnswerSalt;
            }
            set
            {
                if ((this._passwordAnswerSalt != value))
                {
                    this.OnPasswordAnswerSaltChanging(value);
                    this.RaiseDataMemberChanging("PasswordAnswerSalt");
                    this.ValidateProperty("PasswordAnswerSalt", value);
                    this._passwordAnswerSalt = value;
                    this.RaiseDataMemberChanged("PasswordAnswerSalt");
                    this.OnPasswordAnswerSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordHash' value.
        /// </summary>
        [DataMember()]
        public string PasswordHash
        {
            get
            {
                return this._passwordHash;
            }
            set
            {
                if ((this._passwordHash != value))
                {
                    this.OnPasswordHashChanging(value);
                    this.RaiseDataMemberChanging("PasswordHash");
                    this.ValidateProperty("PasswordHash", value);
                    this._passwordHash = value;
                    this.RaiseDataMemberChanged("PasswordHash");
                    this.OnPasswordHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordQuestion' value.
        /// </summary>
        [DataMember()]
        public string PasswordQuestion
        {
            get
            {
                return this._passwordQuestion;
            }
            set
            {
                if ((this._passwordQuestion != value))
                {
                    this.OnPasswordQuestionChanging(value);
                    this.RaiseDataMemberChanging("PasswordQuestion");
                    this.ValidateProperty("PasswordQuestion", value);
                    this._passwordQuestion = value;
                    this.RaiseDataMemberChanged("PasswordQuestion");
                    this.OnPasswordQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordSalt' value.
        /// </summary>
        [DataMember()]
        public string PasswordSalt
        {
            get
            {
                return this._passwordSalt;
            }
            set
            {
                if ((this._passwordSalt != value))
                {
                    this.OnPasswordSaltChanging(value);
                    this.RaiseDataMemberChanging("PasswordSalt");
                    this.ValidateProperty("PasswordSalt", value);
                    this._passwordSalt = value;
                    this.RaiseDataMemberChanged("PasswordSalt");
                    this.OnPasswordSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileReset' value.
        /// </summary>
        [DataMember()]
        public bool ProfileReset
        {
            get
            {
                return this._profileReset;
            }
            set
            {
                if ((this._profileReset != value))
                {
                    this.OnProfileResetChanging(value);
                    this.RaiseDataMemberChanging("ProfileReset");
                    this.ValidateProperty("ProfileReset", value);
                    this._profileReset = value;
                    this.RaiseDataMemberChanged("ProfileReset");
                    this.OnProfileResetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserType' value.
        /// </summary>
        [DataMember()]
        public int UserType
        {
            get
            {
                return this._userType;
            }
            set
            {
                if ((this._userType != value))
                {
                    this.OnUserTypeChanging(value);
                    this.RaiseDataMemberChanging("UserType");
                    this.ValidateProperty("UserType", value);
                    this._userType = value;
                    this.RaiseDataMemberChanged("UserType");
                    this.OnUserTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
    }
    
    /// <summary>
    /// The 'Vendor' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class Vendor : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private string _contactPerson;
        
        private string _email;
        
        private int _meansOfPayment;
        
        private string _phoneNumber;
        
        private string _state;
        
        private int _vendorID;
        
        private string _vendorName;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnContactPersonChanging(string value);
        partial void OnContactPersonChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnMeansOfPaymentChanging(int value);
        partial void OnMeansOfPaymentChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnVendorIDChanging(int value);
        partial void OnVendorIDChanged();
        partial void OnVendorNameChanging(string value);
        partial void OnVendorNameChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Vendor"/> class.
        /// </summary>
        public Vendor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactPerson' value.
        /// </summary>
        [DataMember()]
        public string ContactPerson
        {
            get
            {
                return this._contactPerson;
            }
            set
            {
                if ((this._contactPerson != value))
                {
                    this.OnContactPersonChanging(value);
                    this.RaiseDataMemberChanging("ContactPerson");
                    this.ValidateProperty("ContactPerson", value);
                    this._contactPerson = value;
                    this.RaiseDataMemberChanged("ContactPerson");
                    this.OnContactPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeansOfPayment' value.
        /// </summary>
        [DataMember()]
        public int MeansOfPayment
        {
            get
            {
                return this._meansOfPayment;
            }
            set
            {
                if ((this._meansOfPayment != value))
                {
                    this.OnMeansOfPaymentChanging(value);
                    this.RaiseDataMemberChanging("MeansOfPayment");
                    this.ValidateProperty("MeansOfPayment", value);
                    this._meansOfPayment = value;
                    this.RaiseDataMemberChanged("MeansOfPayment");
                    this.OnMeansOfPaymentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNumber' value.
        /// </summary>
        [DataMember()]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                if ((this._phoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.RaiseDataMemberChanging("PhoneNumber");
                    this.ValidateProperty("PhoneNumber", value);
                    this._phoneNumber = value;
                    this.RaiseDataMemberChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int VendorID
        {
            get
            {
                return this._vendorID;
            }
            set
            {
                if ((this._vendorID != value))
                {
                    this.OnVendorIDChanging(value);
                    this.ValidateProperty("VendorID", value);
                    this._vendorID = value;
                    this.RaisePropertyChanged("VendorID");
                    this.OnVendorIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorName' value.
        /// </summary>
        [DataMember()]
        public string VendorName
        {
            get
            {
                return this._vendorName;
            }
            set
            {
                if ((this._vendorName != value))
                {
                    this.OnVendorNameChanging(value);
                    this.RaiseDataMemberChanging("VendorName");
                    this.ValidateProperty("VendorName", value);
                    this._vendorName = value;
                    this.RaiseDataMemberChanged("VendorName");
                    this.OnVendorNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._vendorID;
        }
    }
    
    /// <summary>
    /// The 'WorkOrder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/InventoryManagement.Data.Web")]
    public sealed partial class WorkOrder : Entity
    {
        
        private string _address;
        
        private string _customerName;
        
        private string _jobID;
        
        private int _jobStatus;
        
        private int _workOrderID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnJobIDChanging(string value);
        partial void OnJobIDChanged();
        partial void OnJobStatusChanging(int value);
        partial void OnJobStatusChanged();
        partial void OnWorkOrderIDChanging(int value);
        partial void OnWorkOrderIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkOrder"/> class.
        /// </summary>
        public WorkOrder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JobID' value.
        /// </summary>
        [DataMember()]
        public string JobID
        {
            get
            {
                return this._jobID;
            }
            set
            {
                if ((this._jobID != value))
                {
                    this.OnJobIDChanging(value);
                    this.RaiseDataMemberChanging("JobID");
                    this.ValidateProperty("JobID", value);
                    this._jobID = value;
                    this.RaiseDataMemberChanged("JobID");
                    this.OnJobIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JobStatus' value.
        /// </summary>
        [DataMember()]
        public int JobStatus
        {
            get
            {
                return this._jobStatus;
            }
            set
            {
                if ((this._jobStatus != value))
                {
                    this.OnJobStatusChanging(value);
                    this.RaiseDataMemberChanging("JobStatus");
                    this.ValidateProperty("JobStatus", value);
                    this._jobStatus = value;
                    this.RaiseDataMemberChanged("JobStatus");
                    this.OnJobStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkOrderID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int WorkOrderID
        {
            get
            {
                return this._workOrderID;
            }
            set
            {
                if ((this._workOrderID != value))
                {
                    this.OnWorkOrderIDChanging(value);
                    this.ValidateProperty("WorkOrderID", value);
                    this._workOrderID = value;
                    this.RaisePropertyChanged("WorkOrderID");
                    this.OnWorkOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._workOrderID;
        }
    }
}
